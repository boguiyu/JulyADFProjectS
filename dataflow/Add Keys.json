{
	"name": "Add Keys",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceData",
						"type": "DatasetReference"
					},
					"name": "Suppliers"
				},
				{
					"dataset": {
						"referenceName": "SourceData",
						"type": "DatasetReference"
					},
					"name": "SupplierCategories"
				},
				{
					"dataset": {
						"referenceName": "SourceData",
						"type": "DatasetReference"
					},
					"name": "SupplierTransactions"
				},
				{
					"dataset": {
						"referenceName": "SourceData",
						"type": "DatasetReference"
					},
					"name": "PurchaseOrders"
				},
				{
					"dataset": {
						"referenceName": "SourceData",
						"type": "DatasetReference"
					},
					"name": "PurchaseOrderLines"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ods",
						"type": "DatasetReference"
					},
					"name": "sinkSuppliers"
				},
				{
					"dataset": {
						"referenceName": "ods",
						"type": "DatasetReference"
					},
					"name": "sinkSC"
				},
				{
					"dataset": {
						"referenceName": "ods",
						"type": "DatasetReference"
					},
					"name": "sinkST"
				},
				{
					"dataset": {
						"referenceName": "ods",
						"type": "DatasetReference"
					},
					"name": "sinkPO"
				},
				{
					"dataset": {
						"referenceName": "ods",
						"type": "DatasetReference"
					},
					"name": "sinkPOL"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "WaterMark"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "WaterMark1"
				},
				{
					"name": "surrogateKey3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "surrogateKey4"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "surrogateKey5"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select *\\nfrom Purchasing.Suppliers',",
				"     format: 'query') ~> Suppliers",
				"source(output(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select *\\nfrom Purchasing.SupplierCategories',",
				"     format: 'query') ~> SupplierCategories",
				"source(output(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select *\\nfrom Purchasing.SupplierTransactions',",
				"     format: 'query') ~> SupplierTransactions",
				"source(output(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select *\\nfrom Purchasing.PurchaseOrders',",
				"     format: 'query') ~> PurchaseOrders",
				"source(output(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select *\\nfrom Purchasing.PurchaseOrderLines',",
				"     format: 'query') ~> PurchaseOrderLines",
				"Suppliers keyGenerate(output({Surrogate Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(WaterMark = currentDate()) ~> WaterMark",
				"SupplierCategories keyGenerate(output({Surrogate Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey2 derive(WaterMark = currentDate()) ~> WaterMark1",
				"SupplierTransactions keyGenerate(output({Surrogate Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey3",
				"surrogateKey3 derive(WaterMark = currentDate()) ~> derivedColumn2",
				"PurchaseOrders keyGenerate(output({Surrogate Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey4",
				"surrogateKey4 derive(WaterMark = currentDate()) ~> derivedColumn3",
				"PurchaseOrderLines keyGenerate(output({Surrogate Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey5",
				"surrogateKey5 derive(WaterMark = currentDate()) ~> derivedColumn4",
				"WaterMark sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CityID,",
				"          CityName,",
				"          StateProvinceID,",
				"          Location,",
				"          LatestRecordedPopulation,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo,",
				"          SK = {Surrogate Key},",
				"          WM = WaterMark",
				"     )) ~> sinkSuppliers",
				"WaterMark1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkSC",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkST",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkPO",
				"derivedColumn4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkPOL"
			]
		}
	}
}